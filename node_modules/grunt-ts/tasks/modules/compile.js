/// <reference path="../../defs/tsd.d.ts"/>
/// <reference path="./interfaces.d.ts"/>
var path = require('path');
var fs = require('fs');
var _ = require('lodash');
var utils = require('./utils');
var cache = require('./cacheUtils');
var Promise = require('es6-promise').Promise;
exports.grunt = require('grunt');
var executeNode;
var executeNodeDefault = function (args, optionalInfo) {
    return new Promise(function (resolve, reject) {
        exports.grunt.util.spawn({
            cmd: process.execPath,
            args: args
        }, function (error, result, code) {
            var ret = {
                code: code,
                output: result.stdout || result.stderr
            };
            resolve(ret);
        });
    });
};
var cacheClearedOnce = {};
function getChangedFiles(files, targetName) {
    files = cache.getNewFilesForTarget(files, targetName);
    _.forEach(files, function (file) {
        exports.grunt.log.writeln(('### Fast Compile >>' + file).cyan);
    });
    return files;
}
function resetChangedFiles(files, targetName) {
    cache.compileSuccessfull(files, targetName);
}
function clearCache(targetName) {
    cache.clearCache(targetName);
    cacheClearedOnce[targetName] = true;
}
function resolveTypeScriptBinPath() {
    var ownRoot = path.resolve(path.dirname((module).filename), '../..');
    var userRoot = path.resolve(ownRoot, '..', '..');
    var binSub = path.join('node_modules', 'typescript', 'bin');
    if (fs.existsSync(path.join(userRoot, binSub))) {
        return path.join(userRoot, binSub);
    }
    return path.join(ownRoot, binSub);
}
function getTsc(binPath) {
    var pkg = JSON.parse(fs.readFileSync(path.resolve(binPath, '..', 'package.json')).toString());
    exports.grunt.log.writeln('Using tsc v' + pkg.version);
    return path.join(binPath, 'tsc');
}
function compileAllFiles(targetFiles, target, task, targetName, outFile) {
    var files = _.map(targetFiles, function (file) { return file; });
    var newFiles = files;
    if (task.fast === 'watch') {
        if (cacheClearedOnce[exports.grunt.task.current.target] === undefined) {
            clearCache(targetName);
        }
    }
    if (task.fast !== 'never') {
        if (target.out) {
            exports.grunt.log.writeln('Fast compile will not work when --out is specified. Ignoring fast compilation'.cyan);
        }
        else {
            newFiles = getChangedFiles(files, targetName);
            if (newFiles.length !== 0) {
                files = newFiles;
                if (target.outDir && !target.baseDir) {
                    target.baseDir = utils.findCommonPath(files, '/');
                }
            }
            else {
                exports.grunt.log.writeln('No file changes were detected. Skipping Compile'.green);
                return new Promise(function (resolve) {
                    var ret = {
                        code: 0,
                        fileCount: 0,
                        output: 'No files compiled as no change detected'
                    };
                    resolve(ret);
                });
            }
        }
    }
    var baseDirFile = '.baseDir.ts';
    var baseDirFilePath;
    if (target.outDir && target.baseDir && files.length > 0) {
        baseDirFilePath = path.join(target.baseDir, baseDirFile);
        if (!fs.existsSync(baseDirFilePath)) {
            exports.grunt.file.write(baseDirFilePath, '// Ignore this file. See https://github.com/grunt-ts/grunt-ts/issues/77');
        }
        files.push(baseDirFilePath);
    }
    if (target.reference && target.out) {
        var referenceFile = path.resolve(target.reference);
        files = [referenceFile];
    }
    files = _.map(files, function (item) { return ("\"" + path.resolve(item) + "\""); });
    if (outFile) {
        outFile = "\"" + path.resolve(outFile) + "\"";
    }
    var args = files.slice(0);
    if (task.sourceMap) {
        args.push('--sourcemap');
    }
    if (task.emitDecoratorMetadata) {
        args.push('--emitDecoratorMetadata');
    }
    if (task.declaration) {
        args.push('--declaration');
    }
    if (task.removeComments) {
        args.push('--removeComments');
    }
    if (task.noImplicitAny) {
        args.push('--noImplicitAny');
    }
    if (task.noResolve) {
        args.push('--noResolve');
    }
    if (task.noEmitOnError) {
        args.push('--noEmitOnError');
    }
    if (task.preserveConstEnums) {
        args.push('--preserveConstEnums');
    }
    if (task.suppressImplicitAnyIndexErrors) {
        args.push('--suppressImplicitAnyIndexErrors');
    }
    if (task.noEmit) {
        args.push('--noEmit');
    }
    if (task.inlineSources) {
        args.push('--inlineSources');
    }
    if (task.inlineSourceMap) {
        args.push('--inlineSourceMap');
    }
    if (task.newLine && !utils.newLineIsRedundant(task.newLine)) {
        args.push('--newLine', task.newLine);
    }
    if (task.isolatedModules) {
        args.push('--isolatedModules');
    }
    if (task.noEmitHelpers) {
        args.push('--noEmitHelpers');
    }
    args.push('--target', task.target.toUpperCase());
    if (task.module) {
        var moduleOptionString = ('' + task.module).toLowerCase();
        if ('amd|commonjs|system|umd'.indexOf(moduleOptionString) > -1) {
            args.push('--module', moduleOptionString);
        }
        else {
            console.warn('WARNING: Option "module" only supports "amd" | "commonjs" | "system" | "umd" '.magenta);
        }
    }
    var theOutDir = null;
    if (target.outDir) {
        if (target.out) {
            console.warn('WARNING: Option "out" and "outDir" should not be used together'.magenta);
        }
        theOutDir = "\"" + path.resolve(target.outDir) + "\"";
        args.push('--outDir', theOutDir);
    }
    if (outFile) {
        if (utils.isJavaScriptFile(outFile)) {
            args.push('--out', outFile);
        }
        else {
            if (!theOutDir) {
                args.push('--outDir', outFile);
            }
        }
    }
    else if (target.out) {
        args.push('--out', target.out);
    }
    if (target.dest && (!target.out) && (!target.outDir)) {
        if (utils.isJavaScriptFile(target.dest)) {
            args.push('--out', target.dest);
        }
        else {
            if (target.dest === 'src') {
                console.warn(('WARNING: Destination for target "' + targetName + '" is "src", which is the default.  If you have' +
                    ' forgotten to specify a "dest" parameter, please add it.  If this is correct, you may wish' +
                    ' to change the "dest" parameter to "src/" or just ignore this warning.').magenta);
            }
            if (Array.isArray(target.dest)) {
                if (target.dest.length === 0) {
                }
                else if (target.dest.length > 0) {
                    console.warn((('WARNING: "dest" for target "' + targetName + '" is an array.  This is not supported by the' +
                        ' TypeScript compiler or grunt-ts.' +
                        ((target.dest.length > 1) ? '  Only the first "dest" will be used.  The' +
                            ' remaining items will be truncated.' : ''))).magenta);
                    args.push('--outDir', target.dest[0]);
                }
            }
            else {
                args.push('--outDir', target.dest);
            }
        }
    }
    if (args.indexOf('--out') > -1 && args.indexOf('--module') > -1) {
        console.warn(('WARNING: TypeScript does not allow external modules to be concatenated with' +
            ' --out. Any exported code may be truncated.  See TypeScript issue #1544 for' +
            ' more details.').magenta);
    }
    if (task.sourceRoot) {
        args.push('--sourceRoot', task.sourceRoot);
    }
    if (task.mapRoot) {
        args.push('--mapRoot', task.mapRoot);
    }
    if (task.additionalFlags) {
        args.push(task.additionalFlags);
    }
    var tsc;
    if (task.compiler) {
        exports.grunt.log.writeln('Using the custom compiler : ' + task.compiler);
        tsc = task.compiler;
    }
    else {
        tsc = getTsc(resolveTypeScriptBinPath());
    }
    if (task.verbose) {
        console.log(args.join(' ').yellow);
    }
    else {
        exports.grunt.log.verbose.writeln(args.join(' ').yellow);
    }
    var tempfilename = utils.getTempFile('tscommand');
    if (!tempfilename) {
        throw (new Error('cannot create temp file'));
    }
    fs.writeFileSync(tempfilename, args.join(' '));
    if (target.testExecute) {
        executeNode = target.testExecute;
    }
    else {
        executeNode = executeNodeDefault;
    }
    return executeNode([tsc, '@' + tempfilename], { target: target, task: task }).then(function (result) {
        if (task.fast !== 'never' && result.code === 0) {
            resetChangedFiles(newFiles, targetName);
        }
        result.fileCount = files.length;
        fs.unlinkSync(tempfilename);
        exports.grunt.log.writeln(result.output);
        return Promise.cast(result);
    }, function (err) {
        fs.unlinkSync(tempfilename);
        throw err;
    });
}
exports.compileAllFiles = compileAllFiles;
